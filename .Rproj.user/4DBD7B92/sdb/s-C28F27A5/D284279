{
    "collab_server" : "",
    "contents" : "#Author: Andrew Holding\n\n#These packages are found on GitHub as AndrewHolding/Brundle &\n# AndrewHolding/BrundleData. They can be installed with\n#\n#install.packages(\"devtools\")\n#library(devtools)\n#\n#install_github(\"AndrewHolding/packagename\")\n\nlibrary(Brundle)\nlibrary(BrundleData)\n\n#Set for you installed location of BrundleData\nsetwd(system.file(\"extdata\",package=\"BrundleData\"))\n\n### Examples for analysis using Diffbind and linear fit\n\n#Set up the intial settings as normal\njg.controlMinOverlap      <- 5\njg.controlSampleSheet     <-\n    system.file(\"extdata\", \"samplesheet_SLX14438_hs_CTCF_DBA.csv\", package =\n                    \"Brundle\")\njg.experimentSampleSheet  <-\n    system.file(\"extdata\", \"samplesheet_SLX14438_hs_ER_DBA.csv\", package =\n                    \"Brundle\")\njg.treatedCondition       =  \"Fulvestrant\"\njg.untreatedCondition     =  \"none\"\n\n\n\n#Load the data from the BAM files. These are only chr22 to reduce size. Still to\n#big for the Bioconductor package size limit.\ndbaExperiment <- jg.getDba(jg.experimentSampleSheet, bRemoveDuplicates=TRUE)\ndbaControl    <- jg.getDba(jg.controlSampleSheet, bRemoveDuplicates=TRUE)\n\n#Save the data for the examples in the package\n#save(dbaExperiment, file=\"data/dbaExperiment.rda\")\n\n#Convert the DBA into a peakset we can manipulate\n\n### Example for function jg.dbaGetPeakset\ndata(dbaExperiment, package=\"Brundle\")\njg.experimentPeakset <- jg.dbaGetPeakset(dbaExperiment)\n### Example finishes\n\n#Repeat for the control samples/peaks & save for examples in package\njg.controlPeakset    <- jg.dbaGetPeakset(dbaControl)\n#save(jg.controlPeakset, file=\"data/jg.controlPeakset.rda\")\n\n#Extract a maxtix of counts in peaks for each rep of a specific condition.\n#Note in this example we specify the condition, but we could use the varible\n#we assigned at the start.\n\n### Example for function jg.getControlCounts\ndata(jg.controlPeakset, package=\"Brundle\")\nfpath <- system.file(\"extdata\", \"samplesheet_SLX14438_hs_CTCF_DBA.csv\",package=\"Brundle\")\njg.controlSampleSheet<-fpath\njg.controlCountsTreated<-jg.getControlCounts(jg.controlPeakset,\n                                             jg.controlSampleSheet,\n                                             \"Fulvestrant\")\n### Example finishes\n\n#Repeat for the untreated/control samples\njg.controlCountsUntreated<-jg.getControlCounts(jg.controlPeakset,\n                                               jg.controlSampleSheet,\n                                               jg.untreatedCondition)\n\n#Get the sample names for replicates that represent the two conditions.\njg.untreatedNames <- names(jg.controlCountsUntreated)\njg.treatedNames   <- names(jg.controlCountsTreated)\n\n#Save data for examples in package\n#save(jg.controlCountsTreated, file=\"data/jg.controlCountsTreated.rda\")\n#save(jg.controlCountsUntreated, file=\"data/jg.controlCountsUntreated.rda\")\n\n#Plot of the normalisation, for visualisation only, not necessary for analysis.\n### Example for jg.plotNormalization\ndata(jg.controlCountsTreated, package=\"Brundle\")\ndata(jg.controlCountsUntreated, package=\"Brundle\")\njg.plotNormalization(jg.controlCountsTreated,\n                     jg.controlCountsUntreated)\n## jg.plotNormalization finshes\n\n#Calculate the noralisation coefficent\n### Example of jg.getNormalizationCoefficient\ndata(jg.controlCountsTreated, package=\"Brundle\")\ndata(jg.controlCountsUntreated, package=\"Brundle\")\njg.coefficient<-jg.getNormalizationCoefficient(jg.controlCountsTreated,\n                                               jg.controlCountsUntreated)\n## jg.getNormalizationCoefficient example ends\n\n\n#Calculates to correction factor for DiffBind, this currently doesn't have an\n#example as it requires the Bam files.\njg.correctionFactor<-jg.getCorrectionFactor(jg.experimentSampleSheet,\n                                            jg.treatedNames,\n                                            jg.untreatedNames)\n\n#Save data for examples in package\n#save(jg.experimentPeakset, file=\"data/jg.experimentPeakset.rda\")\n\n\n#Apply the normalisation to the experimental peakset.\n#As previously some varible have been replaced hard coded values for the\n#example, these are jg.coefficient, jg.correctionFactor and sample names.\n## Example of jg.applyNormalisation\ndata(jg.experimentPeakset, package=\"Brundle\")\njg.experimentPeaksetNormalised<-jg.applyNormalisation(jg.experimentPeakset,\n                                                      1.267618,\n                                                      0.6616886,\n                                                      c(\"1b\", \"2b\", \"3b\"))\n## end of example for jg.applyNormalisation\n\n\n#Return values to Diffbind and plot normalised result.\njg.dba <- DiffBind:::pv.resetCounts(dbaExperiment,\n                                    jg.experimentPeaksetNormalised)\n\n#Plot the results of Chr22\ndba.plotMA(dba.analyze(jg.dba),bSmooth=FALSE,bFlip = TRUE)\n\n### End of DiffBind analysis\n\n### Examples for analysis using DESeq size factors\n\n#Get data in a format for DESeq\n\n## Example of function jg.convertPeakset\ndata(dbaExperiment, package=\"Brundle\")\njg.experimentPeakset <- jg.dbaGetPeakset(dbaExperiment)\njg.experimentPeaksetDeSeq<-jg.convertPeakset(jg.experimentPeakset)\n## End of example for jg.convertPeakset\n\njg.controlPeakset    <- jg.dbaGetPeakset(dbaControl)\njg.controlPeaksetDeSeq<-jg.convertPeakset(jg.controlPeakset)\n\n#save(jg.controlPeaksetDeSeq,file=\"data/jg.controlPeaksetDeSeq.rda\")\n\n\n#Get conditions dataframe for DeSeq2\njg.conditions <- read.csv(file=jg.controlSampleSheet, header=TRUE, sep=\",\")['Condition']\n#save(jg.conditions,file=\"data/jg.conditions.rda\")\n\n# Run DeSeq on control\n## Example of jg.runDeSeq\ndata(jg.controlPeaksetDeSeq,package=\"Brundle\")\ndata(jg.conditions,package=\"Brundle\")\n\n# Establish size factors directly from Control data using DESeq2\njg.controlSizeFactors = estimateSizeFactorsForMatrix(jg.controlPeaksetDeSeq)\n\njg.controlDeSeq<-jg.runDeSeq(jg.controlPeaksetDeSeq, jg.conditions,jg.controlSizeFactors)\njg.controlResultsDeseq = results(jg.controlDeSeq)\n## End of example for jg.runDeSeq\n\n# Run DeSeq on experiment\njg.experimentDeSeq<-jg.runDeSeq(jg.experimentPeaksetDeSeq, jg.conditions,jg.controlSizeFactors)\njg.experimentResultsDeseq   = results(jg.experimentDeSeq)\n\n#Save results for example plots\n#save(jg.experimentResultsDeseq,file=\"data/jg.experimentResultsDeseq.rda\")\n#save(jg.controlResultsDeseq,file=\"data/jg.controlResultsDeseq.rda\")\n\n\n## Example of jg.plotDeSeq\ndata(jg.experimentResultsDeseq,package=\"Brundle\")\njg.plotDeSeq(jg.experimentResultsDeseq,\n             p=0.01,\n             title.main=\"Fold-change in ER binding\",\n             flip=T\n)\n## End of Example for jg.plotDeSeq\n\n\n#Draw Combined figure.\n## Example of jg.plotDeSeqCombined\ndata(jg.controlResultsDeseq,package=\"Brundle\")\ndata(jg.experimentResultsDeseq,package=\"Brundle\")\n\njg.plotDeSeqCombined(jg.controlResultsDeseq,\n                     jg.experimentResultsDeseq,\n                     title.main=\"ER and CTCF Binding Folding changes on ER treatment\",\n                     p=0.01, flip=TRUE)\n## End of Example for jg.plotDeSeqCombined\n\n",
    "created" : 1502235299060.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "250369699",
    "id" : "D284279",
    "lastKnownWriteTime" : 1502235615,
    "last_content_update" : 1502235615109,
    "path" : "/Volumes/Flypeaks/Brundle/Brundle_Example/Examples_for_package.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}